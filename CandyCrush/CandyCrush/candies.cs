using System;
using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;
using CocosSharp;

namespace CandyCrush
{
    // Class that creates one of several different candies,
    // it will contain private variables for it's Name, location, and whether or not it's a special candy
    public class candy : CCNode
    {
        private string candyType, stripeDirection;
        private Random rand;
        private CCSprite candySprite;   // sprite for the candy
        private int row, column;    // variables to hold the location of the candy in the grid

        // As I've decided to added room for striped candies, I no longer need a bool variable to check if it's striped.
        // As I'm longer going to create an ImageView in this class, there's no need for variables for X and Y locations.
        // Can't create an ImageView in this class as it isn't the main class (I assume), probably for the best anyways.
        //ImageView candyImage = new ImageView(this); // this doesn't work, gives an error, this doesn't exist in current context

        // default constructor
        // generates a random candy
        public candy(Random r, string sDirection, int gRow, int gCol)
        {
            rand = r;
            string[] candyTypes = { "Peppermint Swirl", "Blue Jolly Rancher", "Candy Corn", "Purple Nerd", "Green Elliptical" };

            //string[] candyTypes = { "red", "blue", "yellow", "purple", "green" };
            // As the following isn't really necessary, so I'm going to remove it and instead just use
            // generateCandy() directly to get the candyType instead of assigning it to candyNumber.
            //int candyNumber = generateCandy(); // gets the candy number

            // by default the candy has no stripeDirection, only if it's a special candy
            // stripeDirection will also be used to see if the candy is striped.
            stripeDirection = sDirection;
            //  assign the candyType based on the number that is generated by the random number gotten from the method generateCandyType()
            candyType = candyTypes[generateCandyType()];
            row = gRow;
            column = gCol;
            candySprite = new CCSprite("sweetseduction");
            this.AddChild(candySprite);
        }

        // this function is unneeded as it just calls another method right away
        // Generates a candy by generating a random number
        //public int generateCandy()
        //{
        //    return generateCandyType();
        //}

        //  Returns the candy's name
        public string getType()
        {
            return candyType;
        }

        //  Returns the candy's stripe direction
        public string getDirection()
        {
            return stripeDirection;
        }

        public CCSprite getSprite()
        {
            return candySprite;
        }

        //  Returns which row the candy is in
        public int getRow()
        {
            return row;
        }
        
        //  Returns which column the candy is in
        public int getColumn()
        {
            return column;
        }

        // Should have a way to create a special candy for when one of several certain combinations are met
        // if the candy has stripes then give it the direction/orientation of the stripes, "Horizontal" or "Vertical"
        // otherwise pass "None" as it's direction
        public void generateSpecial(string candy, string direction)
        {
            candyType = candy;
            stripeDirection = direction;
        }

        // Generate a random number within the range of 1-5
        // 1 -> Red, 2 -> Blue, 3 -> Yellow, 4 -> Purple, 5 -> Green
        public int generateCandyType()
        {
            return rand.Next(1, 5); // returns a number between 1-5 to randomNumber
        }
    }
}